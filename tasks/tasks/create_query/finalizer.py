import os
import warnings

from tasks.tasks.create_query.line_validation import line_validation_for_checksum
from tasks.tools.general.extract_python_code import extract_python_code
from tasks.tools.general.make_query import make_query


def write_to_file(file_path, content):
    """
    Writes specified content to the provided file.

    Args:
        - file_path (str): The path to the file to write to.
        - content (str): The content to be written in the file.
    """
    with open(file_path, "w", encoding="utf-8") as file:
        file.write(content)


class Finalizer:
    """Processes final stages of file content modification, including checksum
    verification, query creation, and response handling."""

    def __init__(self):
        """Initializes Finalizer with predefined paths and content states."""
        self.file_path = None
        self.query_path = None
        self.response_path = None
        self.checksum = None
        self.updated_contents = None
        self.final_lines = []
        self.query = None

    def set_directories(self, file_path, chats_dir):
        """
        Sets file, query and response paths using provided base directory and
        file path.

        Args:
            - file_path (str): Path of the target file.
            - chats_dir (str): Base directory to save the query and
                response.
        """
        self.file_path = file_path
        self.file_name = os.path.basename(self.file_path).split(".")[0]
        self.file_ext = os.path.splitext(self.file_path)[1]
        self.chats_dir = chats_dir

    def set_backup_handler(self, backup_handler):
        """
        Attaches the provided backup handler to the finalizer.

        Args:
            - backup_handler (BackupHandler): Instance of a BackupHandler to
                be attached.
        """
        self.backup_handler = backup_handler

    def _validate_lines(self):
        """Verifies each line of the updated contents for validation checksums.
        Extra lines are added to the content map for final lines."""
        for line in self.updated_contents.splitlines():
            if result := line_validation_for_checksum(line.strip()):
                self.checksum = result
            else:
                self.final_lines.append(line)

    def _verify_checksum(self):
        """
        Validates that the difference in length of original and final lines
        matches the validated checksum. Raises an error if the checksum does not
        match.
        """
        if self.checksum:
            with open(self.file_path, "r", encoding="utf-8") as file:
                file_contents = file.read().splitlines()
                diff = len(file_contents) - len(self.final_lines)
                if diff != self.checksum:
                    msg = f"Checksum mismatch: {diff} != {self.checksum}"
                    raise ValueError(msg)

    def validate_contents(self, updated_contents):
        """
        Verifies that the checksum of the updated contents matches the verified
        one.

        Args:
            - updated_contents (str): Updated content to be verified.
        """
        self.updated_contents = updated_contents
        self._validate_lines()
        self._verify_checksum()

    def _store_query(self, query):
        """
        Writes the query to the query path.

        Args:
            - query (str): Query to be written.
        """
        query_name = self.file_name + "_query.txt"
        query_path = os.path.join(self.chats_dir, query_name)
        write_to_file(query_path, query)
        print(f"Query saved to {query_path}")

    def _make_query(self, query, max_tokens):
        """
        Prepares a query based on provided parameters and executes it. Writes
        the response of the query to query_path.

        Args:
            - query (str): Query to be executed.
            - max_tokens (int): Maximum number of tokens to be generated by
                model.
        """
        self._store_query(query)
        response = make_query(query, max_tokens) if max_tokens else make_query(query)
        return response

    def _process_response(self, response, modify_inplace):
        """
        Writes the response obtained from a query.

        Args:
            - response (str): The response of the query.
            - modify_inplace (bool): Whether to save the response back in
                the original file.
        """
        python_code = extract_python_code(response)

        response_name = self.file_name + "_response.txt"
        response_path = os.path.join(self.chats_dir, response_name)
        write_to_file(response_path, response)
        print(f"Response saved to {response_path}")
        if python_code:
            code_name = self.file_name + "_code.py"
            code_path = os.path.join(self.chats_dir, code_name)
            write_to_file(code_path, python_code)
            print(f"Python code saved to {code_path}")
        if modify_inplace:
            if not python_code:
                warnings.warn("No Python code found in response.")
            else:
                self.backup_handler.store_backup(
                    self.file_path, "Before modification from create query task."
                )
                backuped_path = self.backup_handler.get_backup_path(self.file_path)
                print(f"Backup saved to {backuped_path}")
                write_to_file(self.file_path, python_code)

    def finalize(self, query, make_query_kwargs):
        """
        Carries out the final stages of content processing including validation,
        checksum verification, and result writing.

        Args:
            - query (str): Query to be executed.
            - make_query_kwargs (dict): Parameters including
                'modify_inplace' and 'max_tokens' for the query.
        """
        self.query = query
        final_text = "\n".join(self.final_lines)
        write_to_file(self.file_path, final_text)
        if make_query_kwargs:
            max_tokens = make_query_kwargs.get("max_tokens")
            modify_inplace = make_query_kwargs.get("modify_inplace")
            response = self._make_query(query, max_tokens)
            self._process_response(response, modify_inplace)
        else:
            self._store_query(query)
